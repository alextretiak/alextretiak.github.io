Н‘‘Шестнадцатиричные и двоичные константы (ссылка на статью)’[http://compiler.su/shestnadtsatirichnye-i-dvoichnye-konstanty.php]’

Комментарии:
Т‘
‘‘*‘2019-08-18’ ~‘alextretyak’

> Не хотите ли Вы сказать, что уже ничто не ново
Ну... я бы немного по-другому сказал. Всё новое — довольно[[[/достаточно]]] спорно. Взять тот же Rust с его lifetimes/borrowing (я, кстати, до сих пор не могу найти пример хорошего кода на Rust, где эти lifetimes оправданны, [[[другими словами — я не понимаю, чем эта модель лучше C++]]]все приводимые примеры в статьях по Rust либо надуманны, либо их можно [[[спокойно/]]]легко переписать на C++ безо всяких lifetimes).[[[Или нововведения в C++ (привет ‘export import’).]]]

> всё Вам настолько знакомо, что в каждом новом языке Вы видите отголоски старых?
Отчасти и это тоже.
Но если посмотреть на эволюцию естественных языков, то можно заметить, например, что русский язык [[[почти]]]существенно не менялся уже более ста лет с реформы 1918 года, и практически/фактически не менялся с 1956 года. А с наступлением цифровой эпохи ни русский, ни английский, никакие другие естественные языки, скорее всего, меняться уже [[[практически ]]]не будут. И я боюсь, что языки программирования постигнет та же участь — [[[с некоторого момента]]]они "заморозятся" и их эволюция завершится (также как когда-то завершилась эволюция чисел [ведь, никто не будет спорить с тем, что числа больше не будут эволюционировать? и не только/просто числа, а язык математики, скорее всего, тоже не будет больше эволюционировать![[[ (кто не согласен — попробуйте привести новшества[?] в математике за последние лет 30[?])]]]]).

> Ну так приведите пример. Как я должен определить функцию func, чтобы я мог записать: `func() = 123;`
#(C++)‘
#include <iostream>

void func(int i) { std::cout << i; }

class Proxy
{
public:
    void operator=(int i) { func(i); }
    operator int() {
        int r;
        std::cin >> r;
        return r;
    }
};

Proxy func() { return Proxy(); }

int main()
{
    func() = 123;   // заменяется на func(123)
    int i = func(); // возвращает число из cin
}
’

> Хотелось, чтобы символы форматирования были на обеих раскладках клавиатуры на одинаковых клавишах.
А я использую AutoHotkey и у меня в обеих раскладках одинаковое поведение при наборе [[[спец]]]символов (например, Shift+2 — это всегда @, Alt+2 — это всегда кавычка ", Shift+3 — это всегда решётка #, а Alt+3 — это всегда № и т.д.).
Соответствующий скрипт можно посмотреть тут: [http://pqmarkup.org/ru] → «‘Советы по набору’/‘способы набора’ символов одиночных парных кавычек ‘ и ’...» → «В этот же файл-скрипт можно дополнительно ещё добавить:».

И, если честно, я считаю проблему переключения раскладок [[[— ]]]несколько надуманной. Также [[[как и]]]весьма сомнительным считаю чрезмерное стремление повысить скорость набора кода [речь про слепую печать и т.д.[[[т.д. — это [[[минимизация переключений раскладки](уже упоминается в этом предложении)]]макросы, горячие клавиши, автодополнение[‘это удобно само по себе, а не с целью повышения скорости набора’]]]]]. На первом месте должно быть *‘качество’ кода или текста, а не его количество. Причём я [[[зачастую]]] наблюдал[[[ именно]]] такую картину, что чем больше программист пишет кода, тем менее он качественный[[[не обижайся Заккер, но код Саши Котляра мне больше нравится]]].
Вот пример из Вашей же статьи[https://habr.com/ru/post/208474/]:
> Ховик Меликян приводит пример, когда программа из 80000 строк кода на Си++ и 55000 строк кода на VB заменялась 10 строками на шелл-скрипте.

И чтобы получить более качественный текст [[[сообщений]]][комментариев или писем], лично я использую два приёма:
1. Откладываю его отправку примерно на одни сутки[[[ [в течение этого срока подсознание наиболее[?] активно[?] присылает мысли по улучшению текста комментария]]]].
2. Периодически перечитываю этот текст. Суммарно получается больше 10 раз точно. Ну и к чему мне эта пресловутая скорость набора, если на ревью и обдумывание/придумывание[[[/составление]]] текста я трачу времени гораздо больше?

А что касается кириллицы в программировании, то, как можно видеть, например в языке КуМир ([http://bsosh6.shkola.hc.ru/teachers_pashut/tuzov/kumir/manual.pdf]) хотя и используются кириллические ключевые слова, но математические функции оставлены на английском (например, sqrt или sin[[[или sin — на уроках математики мы же пишем `sin x`, а не `син х` и ничего, к тому же это слово не английское, а латинское[[[[[а для sqrt можно ввести синоним `квкорень`]]]]]]]] {на уроках математики мы же пишем `sin x`, а не `син х` и ничего}). И я считаю это [[[правильным/]]]оправданным.

>‘... который не так бросается в глаза:
https://habrastorage.org/webt/gw/kz/es/gwkzes4_vqnxphhxqspvgzitw-i.png’
А почему Вы не хотите заменять ссылку на картинку тегом <img src="ссылка-на-картинку" />? Она [эта картинка] ведь совсем небольшая. [[[И/]]]А руками копировать ссылку в адресную строку, чтобы посмотреть на [[[неё/]]]картинку, очень неудобно.
’’
’
